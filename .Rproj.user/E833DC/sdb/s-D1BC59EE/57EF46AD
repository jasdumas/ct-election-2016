{
    "collab_server" : "",
    "contents" : "# Connecticut Presidential Election Results 2016\nlibrary(readr)\nlibrary(dplyr)\nlibrary(leaflet)\nlibrary(rvest)\nlibrary(dumas)\nlibrary(ggplot2)\nlibrary(plotly)\nlibrary(rgdal)\nlibrary(tidyr)\n\nall_results <- read_csv(\"https://raw.githubusercontent.com/mkearney/presidential_election_county_results_2016/master/pres16results.csv\")\n\n# what is in here?\nhead(all_results)\n\n# what are fips? (https://www.census.gov/2010census/partners/pdf/FIPS_StateCounty_Code.pdf)\n# https://en.wikipedia.org/wiki/FIPS_140-2\nlevels(factor(all_results$fips))\n\n# Connecticut FIPS start with 09 - so lets grab those out are explore\nct_results <- all_results[grep(\"^09\", all_results$fips), ]\n\n# add the county names (8 in CT)\nct_results$county <- NA\n# these are the full fips numbers associated with each county\nfairfield <- \"09001\" \nhartford <- \"09003\"\nlitchfield <- \"09005\"\nmiddlesex <- \"09007\"\nnewhaven <- \"09009\"\nnewlondon <- \"09011\"\ntolland <- \"09013\"\nwindham <- \"09015\"\n\nct_results$county[which(ct_results$fips %in% fairfield)] <- \"Fairfield\"\nct_results$county[which(ct_results$fips %in% hartford)] <- \"Hartford\"\nct_results$county[which(ct_results$fips %in% litchfield)] <- \"Litchfield\"\nct_results$county[which(ct_results$fips %in% middlesex)] <- \"Middlesex\"\nct_results$county[which(ct_results$fips %in% newhaven)] <- \"New Haven\"\nct_results$county[which(ct_results$fips %in% newlondon)] <- \"New London\"\nct_results$county[which(ct_results$fips %in% tolland)] <- \"Tolland\"\nct_results$county[which(ct_results$fips %in% windham)] <- \"Windham\"\n\nView(ct_results)\n\n# exploratory data analysis\nggplot(ct_results, aes(x = cand_name, y = votes, fill = county)) +\n  geom_bar(stat = \"identity\")\n\n## -------------------------------- ##\n# CT level county shapefiles for 2015\ntmp2 = tempdir()\n#url2 = \"http://magic.lib.uconn.edu/magic_2/vector/37800/countyct_37800_0000_2010_s100_census_1_shp.zip\"\nurl2 = \"http://www2.census.gov/geo/tiger/GENZ2015/shp/cb_2015_us_county_500k.zip\"\nfile <- basename(url2)\ndownload.file(url2, file)\nunzip(file, exdir = tmp2)\nct_shp <- readOGR(dsn = tmp2,\n                  layer = \"cb_2015_us_county_500k\", encoding = \"UTF-8\")\ndim(ct_shp)\n\n# fix the FIPS number in the shape file for merging\nct_shp@data$fips <- paste0(ct_shp@data$GEOID)\n\n# create a empty df\nct_econ <- data.frame(matrix(ncol=10, nrow = 0))\n\n# add some economic data from https://datausa.io/ for each county by web-scrapping\ncounty_urls <- c(\"https://datausa.io/profile/geo/fairfield-county-ct/\", \n                 \"https://datausa.io/profile/geo/hartford-county-ct/\", \n                 \"https://datausa.io/profile/geo/litchfield-county-ct/\", \n                 \"https://datausa.io/profile/geo/middlesex-county-ct/\", \n                 \"https://datausa.io/profile/geo/new-haven-county-ct/\", \n                 \"https://datausa.io/profile/geo/new-london-county-ct/\", \n                 \"https://datausa.io/profile/geo/tolland-county-ct/\", \n                 \"https://datausa.io/profile/geo/windham-county-ct/\")\n#  for loop for each of the counties\nfor (i in county_urls){\n  table <- read_html(i) %>% \n    html_nodes(\".stat-text+ .stat-value .stat-span\") %>% \n    html_text() %>% \n    data.frame()\n  # transpose into rows!\n  table_keep <- t(data.frame(table[c(1:9, 17), ]))\n  # append to a master data frame\n  ct_econ <- rbind(ct_econ, table_keep)\n}\n\n# add column names / mentally choose which values to keep after looking on the website\ncolnames(ct_econ) <- c(\"med_house_income14\", \n                       \"avg_male_income\", \n                       \"avg_female_income\", \n                       \"highest_income_race\", \n                       \"wage_gini\", \n                       \"largest_demo_poverty\", \n                       \"largest_race_poverty\", \n                       \"med_native_age\", \n                       \"med_foreign_age\", \n                       \"common_major\") \nct_econ$county <- c(\"Fairfield\", \"Hartford\", \"Litchfield\", \"Middlesex\", \n                    \"New Haven\", \"New London\", \"Tolland\", \"Windham\")\n\n# merge this with the ct_results with the economic data\nct_join <-  dplyr::full_join(ct_results, ct_econ)\n\n# full join the data set \nct_join <- dplyr::full_join(ct_shp@data, ct_join)\n\n# remove rows with NA's - i.e. remove everything except the choosen state\nct_clean = na.omit(ct_join)\n\n## let's try a specific candidate\n#HRC <- ct_join[ct_join$cand_name == \"Hillary Clinton\", ]\n\n# merge this with the entire shapefile object\nct_shp2 <- ct_shp\nct_shp2 <- sp::merge(x = ct_shp2, y = ct_clean, \n                     by = \"fips\", all.x = F, \n                     duplicateGeoms=TRUE)\nplot(ct_shp2)\n## ------------------------------ ##\n## let's get mapping with leaflet ##\n\n# create seperate color patterns for each candidate for layers\nHRC <- ct_results[which(ct_results$cand_name == \"Hillary Clinton\"),] \nDT <- ct_results[which(ct_results$cand_name == \"Donald Trump\"),]\nGJ <- ct_results[which(ct_results$cand_name == \"Gary Johnson\"),]\nJT <- ct_results[which(ct_results$cand_name == \"Jill Stein\"),]\n\npal1 <- colorBin(palette = \"Blues\", domain = HRC$votes, bins = 8)\npal2 <- colorBin(palette = \"Reds\", domain = DT$votes, bins = 8)\npal3 <- colorBin(palette = \"YlOrRd\", domain = GJ$votes, bins = 8)\npal4 <- colorBin(palette = \"Greens\", domain = JT$votes, bins = 8)\n\n# pop values statewide regardless of candidate\nstate_popup <- paste0(\"<strong>County: </strong>\", \n                      ct_shp2$county, \n                      \"<br><strong>Total Amount of 2016 Voters: </strong>\", \n                      ct_shp2$total,\n                      \"<br><strong>Median Household Income: </strong>\", \n                      ct_shp2$med_house_income14, \n                      \"<br><strong>Average Female Income: </strong>\",\n                      ct_shp2$avg_female_income, \n                      \"<br><strong>Wage Equality Index: </strong>\", \n                      ct_shp2$wage_gini, \n                      \"<br><strong>Largest Demographic in Poverty: </strong>\", \n                      ct_shp2$largest_demo_poverty)\n\n# plot the map(s)\nhrc_map <- leaflet(data = ct_shp2) %>%\n  addProviderTiles(\"CartoDB.Positron\") %>%\n  addPolygons(fillColor = ~pal1(HRC$votes), \n              fillOpacity = 0.7, \n              color = \"#BDBDC3\", \n              weight = 1, \n              popup = state_popup) %>%\n  addLegend(\"bottomright\", \n            pal = pal1, \n            values = ~HRC$votes,\n            title = \"Total Votes for Hillary Clinton: \",\n            opacity = 1)\nprint(hrc_map)\n\ndt_map <- leaflet(data = ct_shp2) %>%\n  addProviderTiles(\"CartoDB.Positron\") %>%\n  addPolygons(fillColor = ~pal2(DT$votes), \n              fillOpacity = 0.7, \n              color = \"#BDBDC3\", \n              weight = 1, \n              popup = state_popup) %>%\n  addLegend(\"bottomright\", \n            pal = pal2, \n            values = ~DT$votes,\n            title = \"Total Votes for Donald Trump: \",\n            opacity = 1) \nprint(dt_map)\n\n\ngj_map <- leaflet(data = ct_shp2) %>%\n  addProviderTiles(\"CartoDB.Positron\") %>%\n  addPolygons(fillColor = ~pal3(GJ$votes), \n              fillOpacity = 0.7, \n              color = \"#BDBDC3\", \n              weight = 1, \n              popup = state_popup) %>%\n  addLegend(\"bottomleft\", \n            pal = pal3, \n            values = ~GJ$votes,\n            title = \"Total Votes for Gary Johnson: \",\n            opacity = 1) \nprint(gj_map)\n\n\njt_map <- leaflet(data = ct_shp2) %>%\n  addProviderTiles(\"CartoDB.Positron\") %>%\n  addPolygons(fillColor = ~pal4(JT$votes), \n              fillOpacity = 0.7, \n              color = \"#BDBDC3\", \n              weight = 1, \n              popup = state_popup) %>%\n  addLegend(\"bottomleft\", \n            pal = pal4, \n            values = ~JT$votes,\n            title = \"Total Votes for Jill Stein: \",\n            opacity = 1) \nprint(jt_map)\n\n\n\n\n\n",
    "created" : 1478880217004.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1368916849",
    "id" : "57EF46AD",
    "lastKnownWriteTime" : 1478993344,
    "last_content_update" : 1478993344,
    "path" : "~/Desktop/R-directory/ct-election-2016/ct-election-2016-analysis.R",
    "project_path" : "ct-election-2016-analysis.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}